{
  "manifest_version": "0.2",
  "name": "gns3-mcp",
  "display_name": "GNS3 Lab Controller",
  "version": "0.20.0",
  "description": "GNS3 lab automation - 20 tools + 17 resources + 4 prompts with standardized error handling and version tracking",
  "long_description": "COMPLETE MCP SERVER: 20 tools + 17 browsable resources + 4 workflow prompts. Version 0.20.0 NEW: Single source of truth for version (manifest.json), standardized error handling with 26 error codes, comprehensive error utilities with suggested actions, version tracking in all errors. Foundation for improved developer experience. Version 0.19.0: MCP tool annotations (destructive/idempotent/read_only/creates_resource/modifies_topology), drawing tools with hybrid architecture. Version 0.18.0: Core Lab Automation - project/node/snapshot management, lab setup with 6 topology types. Supports GNS3 v3 API.",
  "author": {
    "name": "Sergei Chistokhin",
    "email": "Sergei@Chistokhin.com"
  },
  "server": {
    "type": "python",
    "entry_point": "server/main.py",
    "mcp_config": {
      "command": "python",
      "args": [
        "${__dirname}/server/main.py",
        "--host=${user_config.gns3_host}",
        "--port=${user_config.gns3_port}",
        "--username=${user_config.username}",
        "--password=${user_config.password}"
      ],
      "env": {
        "PYTHONPATH": "${__dirname}/lib;${__dirname}/server"
      }
    }
  },
  "user_config": {
    "gns3_host": {
      "type": "string",
      "title": "GNS3 Server Host",
      "description": "GNS3 server hostname or IP address",
      "default": "localhost",
      "required": true
    },
    "gns3_port": {
      "type": "number",
      "title": "GNS3 Server Port",
      "description": "GNS3 server API port",
      "default": 80,
      "required": true
    },
    "username": {
      "type": "string",
      "title": "Username",
      "description": "GNS3 username",
      "default": "admin",
      "required": true
    },
    "password": {
      "type": "string",
      "title": "Password",
      "description": "GNS3 password",
      "sensitive": true,
      "required": true
    }
  },
  "tools": [
    {
      "name": "open_project",
      "description": "Open a GNS3 project by name (returns JSON ProjectInfo)"
    },
    {
      "name": "create_project",
      "description": "Create a new GNS3 project and auto-open it (returns JSON ProjectInfo)"
    },
    {
      "name": "close_project",
      "description": "Close the currently opened project (returns JSON success message)"
    },
    {
      "name": "set_node",
      "description": "Configure node properties and/or control state (returns JSON status message)"
    },
    {
      "name": "create_node",
      "description": "Create a new node from template at specified coordinates (returns JSON NodeInfo)"
    },
    {
      "name": "console_send",
      "description": "Send data to console (auto-connects, returns status string)"
    },
    {
      "name": "console_read",
      "description": "Read console output with mode parameter (mode='diff'/'last_page'/'num_pages'/'all', supports grep filtering)"
    },
    {
      "name": "console_disconnect",
      "description": "Disconnect console session (returns JSON status)"
    },
    {
      "name": "console_keystroke",
      "description": "Send special keystroke to console (navigation, editing, control keys)"
    },
    {
      "name": "set_connection",
      "description": "Batch manage network connections with two-phase validation (returns JSON OperationResult)"
    },
    {
      "name": "delete_node",
      "description": "Delete a node from the current project (returns JSON confirmation)"
    },
    {
      "name": "create_snapshot",
      "description": "Create a snapshot of the current project state (returns JSON SnapshotInfo)"
    },
    {
      "name": "restore_snapshot",
      "description": "Restore project to a previous snapshot state (returns JSON success message)"
    },
    {
      "name": "ssh_configure",
      "description": "Configure SSH session for device (requires SSH enabled, returns JSON with session_id/connected status)"
    },
    {
      "name": "ssh_command",
      "description": "Execute SSH command(s) with auto-detection (string=show command, list=config commands)"
    },
    {
      "name": "ssh_disconnect",
      "description": "Disconnect SSH session (returns JSON status)"
    },
    {
      "name": "export_topology_diagram",
      "description": "Export topology diagram as SVG/PNG with optional crop region (returns JSON with file paths)"
    },
    {
      "name": "create_drawing",
      "description": "Create a drawing object - rectangle, ellipse, line, or text (returns JSON with drawing info)"
    },
    {
      "name": "update_drawing",
      "description": "Update properties of an existing drawing object (returns JSON with updated drawing)"
    },
    {
      "name": "delete_drawing",
      "description": "Delete a drawing object from the current project (returns JSON confirmation)"
    }
  ],
  "prompts": [
    {
      "name": "ssh_setup",
      "description": "SSH Setup Workflow - Device-specific instructions for configuring SSH on network devices (Cisco IOS, NX-OS, MikroTik, Juniper, Arista, Linux)",
      "text": "Device-specific SSH configuration workflow for Cisco IOS, NX-OS, MikroTik, Juniper, Arista, and Linux devices"
    },
    {
      "name": "topology_discovery",
      "description": "Topology Discovery Workflow - Discover and visualize network topology using MCP resources and tools",
      "text": "Guided workflow for discovering and visualizing network topology using MCP resources and export tools"
    },
    {
      "name": "troubleshooting",
      "description": "Network Troubleshooting Workflow - OSI model-based systematic troubleshooting for network labs",
      "text": "OSI model-based systematic troubleshooting methodology for network lab issues"
    },
    {
      "name": "lab_setup",
      "description": "Lab Setup Workflow - Automated lab topology creation with 6 topology types (star, mesh, linear, ring, OSPF, BGP)",
      "text": "Automated lab topology creation supporting star, mesh, linear, ring, OSPF, and BGP topologies"
    }
  ],
  "compatibility": {
    "platforms": ["darwin", "win32", "linux"],
    "runtimes": {
      "python": ">=3.10"
    }
  }
}
