{
  "manifest_version": "0.2",
  "name": "gns3-mcp",
  "display_name": "GNS3 Lab Controller",
  "version": "0.9.1",
  "description": "Control and automate GNS3 network labs through Claude with type-safe operations",
  "long_description": "Version 0.9.1: PATCH - Improved error messages with suggested_action (15 locations), standardized tool descriptions with return types, better adapter error messages, fixed read_console() validation consistency. Version 0.9.0: MAJOR REFACTORING (BREAKING) - Removed caching, detect_console_state(). CHANGED: read_console(mode='diff'/'last_page'/'all'). Version 0.8.1: send_and_wait_console() best practices. Version 0.7.0: set_connection() accepts adapter names. Supports GNS3 v3 API.",
  "author": {
    "name": "Sergei Chistokhin",
    "email": "Sergei@Chistokhin.com"
  },
  "server": {
    "type": "python",
    "entry_point": "server/main.py",
    "mcp_config": {
      "command": "python",
      "args": [
        "${__dirname}/server/main.py",
        "--host=${user_config.gns3_host}",
        "--port=${user_config.gns3_port}",
        "--username=${user_config.username}",
        "--password=${user_config.password}"
      ],
      "env": {
        "PYTHONPATH": "${__dirname}/lib;${__dirname}/server"
      }
    }
  },
  "user_config": {
    "gns3_host": {
      "type": "string",
      "title": "GNS3 Server Host",
      "description": "GNS3 server hostname or IP address",
      "default": "localhost",
      "required": true
    },
    "gns3_port": {
      "type": "number",
      "title": "GNS3 Server Port",
      "description": "GNS3 server API port",
      "default": 80,
      "required": true
    },
    "username": {
      "type": "string",
      "title": "Username",
      "description": "GNS3 username",
      "default": "admin",
      "required": true
    },
    "password": {
      "type": "string",
      "title": "Password",
      "description": "GNS3 password",
      "sensitive": true,
      "required": true
    }
  },
  "tools": [
    {
      "name": "list_projects",
      "description": "List all GNS3 projects (returns JSON array of ProjectInfo)"
    },
    {
      "name": "open_project",
      "description": "Open a GNS3 project by name (returns JSON ProjectInfo)"
    },
    {
      "name": "list_nodes",
      "description": "List all nodes in current project (returns JSON array of NodeInfo)"
    },
    {
      "name": "get_node_details",
      "description": "Get detailed node information (returns JSON NodeInfo)"
    },
    {
      "name": "get_links",
      "description": "List all network links with adapters/ports (returns JSON array of LinkInfo)"
    },
    {
      "name": "set_node",
      "description": "Configure node properties and/or control state (returns JSON status message)"
    },
    {
      "name": "send_console",
      "description": "Send commands to node console (returns status string, auto-connects if needed)"
    },
    {
      "name": "read_console",
      "description": "Read console output with mode parameter (returns console output string, mode='diff'/'last_page'/'all')"
    },
    {
      "name": "disconnect_console",
      "description": "Disconnect from node console session (returns JSON status)"
    },
    {
      "name": "get_console_status",
      "description": "Check console connection status for a node (returns JSON ConsoleStatus)"
    },
    {
      "name": "send_and_wait_console",
      "description": "Send command and wait for specific prompt pattern (returns JSON with output, pattern_found, timeout_occurred)"
    },
    {
      "name": "send_keystroke",
      "description": "Send special keystroke to console (returns status string)"
    },
    {
      "name": "set_connection",
      "description": "Batch manage network connections with two-phase validation (returns JSON OperationResult)"
    },
    {
      "name": "delete_node",
      "description": "Delete a node from the current project (returns JSON confirmation)"
    },
    {
      "name": "list_templates",
      "description": "List all available GNS3 templates (returns JSON array of TemplateInfo)"
    },
    {
      "name": "create_node",
      "description": "Create a new node from a template at specified coordinates (returns JSON with NodeInfo)"
    },
    {
      "name": "list_drawings",
      "description": "List all drawing objects in current project (returns JSON array of DrawingInfo)"
    },
    {
      "name": "create_drawing",
      "description": "Create a drawing object (returns JSON DrawingInfo, types: rectangle/ellipse/line/text)"
    },
    {
      "name": "delete_drawing",
      "description": "Delete a drawing object from the current project (returns JSON confirmation)"
    },
    {
      "name": "export_topology_diagram",
      "description": "Export topology as SVG and/or PNG diagram (returns JSON with file paths and diagram info)"
    }
  ],
  "compatibility": {
    "platforms": ["darwin", "win32", "linux"],
    "runtimes": {
      "python": ">=3.10"
    }
  }
}
