{
  "manifest_version": "0.3",
  "name": "gns3-mcp",
  "display_name": "GNS3 Lab Controller",
  "version": "0.40.1",
  "description": "GNS3 lab automation with AI agent",
  "long_description": "GNS3 v3 lab automation MCP server. Can create/delete/modify nodes, drawings, connect/disconnect nodes, configure them with console and ssh proxy access. v0.40.1: Windows service graceful shutdown fix.",
  "author": {
    "name": "Sergei Chistokhin",
    "email": "Sergei@Chistokhin.com"
  },
  "server": {
    "type": "python",
    "entry_point": "server/main.py",
    "mcp_config": {
      "command": "python",
      "args": [
        "${__dirname}/server/main.py",
        "--host=${user_config.gns3_host}",
        "--port=${user_config.gns3_port}",
        "--username=${user_config.username}",
        "--password=${user_config.password}"
      ],
      "env": {
        "PYTHONPATH": "${__dirname}/lib;${__dirname}/server"
      }
    }
  },
  "user_config": {
    "gns3_host": {
      "type": "string",
      "title": "GNS3 Server Host",
      "description": "GNS3 server hostname or IP address",
      "default": "localhost",
      "required": true
    },
    "gns3_port": {
      "type": "number",
      "title": "GNS3 Server Port",
      "description": "GNS3 server API port",
      "default": 80,
      "required": true
    },
    "username": {
      "type": "string",
      "title": "Username",
      "description": "GNS3 username",
      "default": "admin",
      "required": true
    },
    "password": {
      "type": "string",
      "title": "Password",
      "description": "GNS3 password",
      "sensitive": true,
      "required": true
    }
  },
  "tools": [
    {
      "name": "check_gns3_connection",
      "description": "Check GNS3 server connection status with error details and last attempt time"
    },
    {
      "name": "retry_gns3_connection",
      "description": "Force immediate GNS3 reconnection attempt (bypasses backoff timer)"
    },
    {
      "name": "open_project",
      "description": "Open a GNS3 project by name"
    },
    {
      "name": "create_project",
      "description": "Create a new GNS3 project and auto-open it"
    },
    {
      "name": "close_project",
      "description": "Close the currently opened project"
    },
    {
      "name": "set_node_properties",
      "description": "Configure node properties and/or control state. v0.40.0: Supports wildcard patterns ('*', 'Router*'), JSON arrays, and parallel execution for bulk operations"
    },
    {
      "name": "create_node",
      "description": "Create a new node from template at specified coordinates"
    },
    {
      "name": "send_console_data",
      "description": "Send data to console (auto-connects)"
    },
    {
      "name": "read_console_output",
      "description": "Read console output with mode parameter (mode='diff'/'last_page'/'num_pages'/'all', supports grep filtering)"
    },
    {
      "name": "disconnect_console",
      "description": "Disconnect console session"
    },
    {
      "name": "send_console_keystroke",
      "description": "Send special keystroke to console (navigation, editing, control keys)"
    },
    {
      "name": "send_console_command_and_wait",
      "description": "Send command and wait for prompt pattern with timeout (pattern matching + auto-polling, output and timing)"
    },
    {
      "name": "console_batch_operations",
      "description": "Execute multiple console operations in batch (send/send_and_wait/read/keystroke) with two-phase validation and full parameter support"
    },
    {
      "name": "set_network_connections",
      "description": "Batch manage network connections with two-phase validation"
    },
    {
      "name": "delete_node",
      "description": "Delete a node from the current project"
    },
    {
      "name": "get_node_file",
      "description": "Read file from Docker node filesystem"
    },
    {
      "name": "write_node_file",
      "description": "Write file to Docker node filesystem - requires manual node restart to apply changes"
    },
    {
      "name": "configure_node_network",
      "description": "Configure network interfaces on Docker node with static IP or DHCP - automatically restarts node to apply (returns configured interfaces)"
    },
    {
      "name": "get_project_readme",
      "description": "Get project README/notes in markdown format - IP schemes, credentials, architecture notes"
    },
    {
      "name": "update_project_readme",
      "description": "Update project README/notes - agent can store IP addresses, credentials, architecture diagrams, troubleshooting notes"
    },
    {
      "name": "configure_ssh_session",
      "description": "Configure SSH session with multi-proxy support and auto-recovery. Use proxy='host' (default) for main proxy, or proxy=proxy_id for lab proxies (discovered via gns3://proxy/registry). Auto-recovery: 30min TTL, health checks, auto-recreates stale sessions. After 'Socket is closed' error: just retry - no force needed. Requires SSH enabled on device first."
    },
    {
      "name": "execute_ssh_command",
      "description": "Execute SSH command(s) with auto-detection (string=show command, list=config commands)"
    },
    {
      "name": "disconnect_ssh_session",
      "description": "Disconnect SSH session (returns JSON status)"
    },
    {
      "name": "ssh_batch_operations",
      "description": "Execute multiple SSH operations in batch with two-phase validation"
    },
    {
      "name": "export_topology_diagram",
      "description": "Export topology diagram as SVG/PNG with optional crop region"
    },
    {
      "name": "create_drawing",
      "description": "Create a drawing object - rectangle, ellipse, line, or text"
    },
    {
      "name": "update_drawing",
      "description": "Update properties of an existing drawing object"
    },
    {
      "name": "delete_drawing",
      "description": "Delete a drawing object from the current project"
    },
    {
      "name": "create_drawings_batch",
      "description": "Create multiple drawing objects in batch"
    }
  ],
  "prompts": [
    {
      "name": "ssh_setup",
      "description": "SSH Setup Workflow - Device-specific instructions for configuring SSH on network devices (Cisco IOS, NX-OS, MikroTik, Juniper, Arista, Linux)",
      "text": "Device-specific SSH configuration workflow for Cisco IOS, NX-OS, MikroTik, Juniper, Arista, and Linux devices"
    },
    {
      "name": "topology_discovery",
      "description": "Topology Discovery Workflow - Discover and visualize network topology using MCP resources and tools",
      "text": "Guided workflow for discovering and visualizing network topology using MCP resources and export tools"
    },
    {
      "name": "troubleshooting",
      "description": "Network Troubleshooting Workflow - OSI model-based systematic troubleshooting for network labs",
      "text": "OSI model-based systematic troubleshooting methodology for network lab issues"
    },
    {
      "name": "lab_setup",
      "description": "Lab Setup Workflow - Automated lab topology creation with 6 topology types (star, mesh, linear, ring, OSPF, BGP)",
      "text": "Automated lab topology creation supporting star, mesh, linear, ring, OSPF, and BGP topologies"
    },
    {
      "name": "node_setup",
      "description": "Node Setup Workflow - Complete workflow for adding a new node to a lab (create, configure IP, document in README, establish SSH)",
      "text": "Complete workflow covering: create node from template, start and wait for boot, configure IP address via console, document IP/credentials in project README, and establish SSH session for automation. Supports Cisco IOS, Linux, and MikroTik with device-specific configuration commands."
    }
  ],
  "compatibility": {
    "platforms": ["darwin", "win32", "linux"],
    "runtimes": {
      "python": ">=3.10"
    }
  }
}
