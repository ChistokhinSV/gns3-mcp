{
  "manifest_version": "0.2",
  "name": "gns3-mcp",
  "display_name": "GNS3 Lab Controller",
  "version": "0.12.0",
  "description": "Control and automate GNS3 network labs with console and SSH automation",
  "long_description": "Version 0.12.0: FEATURE - SSH proxy service for network device automation via Netmiko. 9 new MCP tools for SSH sessions, command execution, config management, and job history. Dual storage: continuous buffer + per-command jobs. Supports 200+ device types. Version 0.11.1: Added num_pages mode to read_console(). Version 0.11.0: Console manager tests, code organization. Supports GNS3 v3 API.",
  "author": {
    "name": "Sergei Chistokhin",
    "email": "Sergei@Chistokhin.com"
  },
  "server": {
    "type": "python",
    "entry_point": "server/main.py",
    "mcp_config": {
      "command": "python",
      "args": [
        "${__dirname}/server/main.py",
        "--host=${user_config.gns3_host}",
        "--port=${user_config.gns3_port}",
        "--username=${user_config.username}",
        "--password=${user_config.password}"
      ],
      "env": {
        "PYTHONPATH": "${__dirname}/lib;${__dirname}/server"
      }
    }
  },
  "user_config": {
    "gns3_host": {
      "type": "string",
      "title": "GNS3 Server Host",
      "description": "GNS3 server hostname or IP address",
      "default": "localhost",
      "required": true
    },
    "gns3_port": {
      "type": "number",
      "title": "GNS3 Server Port",
      "description": "GNS3 server API port",
      "default": 80,
      "required": true
    },
    "username": {
      "type": "string",
      "title": "Username",
      "description": "GNS3 username",
      "default": "admin",
      "required": true
    },
    "password": {
      "type": "string",
      "title": "Password",
      "description": "GNS3 password",
      "sensitive": true,
      "required": true
    }
  },
  "tools": [
    {
      "name": "list_projects",
      "description": "List all GNS3 projects (returns JSON array of ProjectInfo)"
    },
    {
      "name": "open_project",
      "description": "Open a GNS3 project by name (returns JSON ProjectInfo)"
    },
    {
      "name": "list_nodes",
      "description": "List all nodes in current project (returns JSON array of NodeInfo)"
    },
    {
      "name": "get_node_details",
      "description": "Get detailed node information (returns JSON NodeInfo)"
    },
    {
      "name": "get_links",
      "description": "List all network links with adapters/ports (returns JSON array of LinkInfo)"
    },
    {
      "name": "set_node",
      "description": "Configure node properties and/or control state (returns JSON status message)"
    },
    {
      "name": "send_console",
      "description": "Send commands to node console (returns status string, auto-connects if needed)"
    },
    {
      "name": "read_console",
      "description": "Read console output with mode parameter (returns console output string, mode='diff'/'last_page'/'num_pages'/'all', supports pages parameter for num_pages mode)"
    },
    {
      "name": "disconnect_console",
      "description": "Disconnect from node console session (returns JSON status)"
    },
    {
      "name": "get_console_status",
      "description": "Check console connection status for a node (returns JSON ConsoleStatus)"
    },
    {
      "name": "send_and_wait_console",
      "description": "Send command and wait for specific prompt pattern (returns JSON with output, pattern_found, timeout_occurred)"
    },
    {
      "name": "send_keystroke",
      "description": "Send special keystroke to console (returns status string)"
    },
    {
      "name": "set_connection",
      "description": "Batch manage network connections with two-phase validation (returns JSON OperationResult)"
    },
    {
      "name": "delete_node",
      "description": "Delete a node from the current project (returns JSON confirmation)"
    },
    {
      "name": "list_templates",
      "description": "List all available GNS3 templates (returns JSON array of TemplateInfo)"
    },
    {
      "name": "create_node",
      "description": "Create a new node from a template at specified coordinates (returns JSON with NodeInfo)"
    },
    {
      "name": "list_drawings",
      "description": "List all drawing objects in current project (returns JSON array of DrawingInfo)"
    },
    {
      "name": "create_drawing",
      "description": "Create a drawing object (returns JSON DrawingInfo, types: rectangle/ellipse/line/text)"
    },
    {
      "name": "delete_drawing",
      "description": "Delete a drawing object from the current project (returns JSON confirmation)"
    },
    {
      "name": "export_topology_diagram",
      "description": "Export topology as SVG and/or PNG diagram (returns JSON with file paths and diagram info)"
    },
    {
      "name": "configure_ssh",
      "description": "Configure SSH session for device (requires SSH enabled on device, returns JSON with session_id/connected status)"
    },
    {
      "name": "ssh_send_command",
      "description": "Execute show command via SSH (returns JSON with job_id/output, supports adaptive async with wait_timeout)"
    },
    {
      "name": "ssh_send_config_set",
      "description": "Send configuration commands via SSH (returns JSON with job_id/output)"
    },
    {
      "name": "ssh_read_buffer",
      "description": "Read SSH continuous buffer (modes: diff/last_page/num_pages/all, returns JSON with output)"
    },
    {
      "name": "ssh_get_history",
      "description": "List SSH command history (limit/search params, returns JSON with jobs list)"
    },
    {
      "name": "ssh_get_command_output",
      "description": "Get specific SSH command output by job_id (returns JSON with full Job details)"
    },
    {
      "name": "ssh_get_status",
      "description": "Check SSH session status (returns JSON with connected/buffer_size/total_commands)"
    },
    {
      "name": "ssh_cleanup_sessions",
      "description": "Clean orphaned/all SSH sessions (keep_nodes/clean_all params, returns JSON with cleaned list)"
    },
    {
      "name": "ssh_get_job_status",
      "description": "Poll async SSH job status by job_id (returns JSON with completion status/output)"
    }
  ],
  "compatibility": {
    "platforms": ["darwin", "win32", "linux"],
    "runtimes": {
      "python": ">=3.10"
    }
  }
}
