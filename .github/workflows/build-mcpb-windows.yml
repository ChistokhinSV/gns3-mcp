name: Build Windows MCP Extension

on:
  workflow_dispatch:  # Manual trigger
  push:
    tags:
      - 'v*'  # Trigger on version tags

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache lib folder
        id: cache-lib
        uses: actions/cache@v4
        with:
          path: mcp-server\lib
          key: ${{ runner.os }}-py3.10-lib-v2-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-py3.10-lib-v2-
            ${{ runner.os }}-lib-

      - name: Create lib directory
        if: steps.cache-lib.outputs.cache-hit != 'true'
        run: |
          New-Item -Path mcp-server\lib -ItemType Directory -Force | Out-Null

      - name: Install Python dependencies to lib
        if: steps.cache-lib.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          # Extract only production dependencies from requirements.txt (skip dev dependencies)
          Select-String -Path requirements.txt -Pattern "^[a-z]" | Select-Object -First 9 | ForEach-Object { $_.Line } | Out-File -FilePath prod-requirements.txt
          pip install --target=mcp-server\lib -r prod-requirements.txt --no-warn-script-location

      - name: Install build tools for PyPI
        run: |
          pip install build twine

      - name: Verify dependencies installed
        run: |
          if ('${{ steps.cache-lib.outputs.cache-hit }}' -eq 'true') {
            Write-Host "Cache status: HIT - Using cached dependencies"
          } else {
            Write-Host "Cache status: MISS - Installed fresh dependencies"
          }
          Get-ChildItem mcp-server\lib
          Write-Host "Installed packages:"
          Get-ChildItem mcp-server\lib | Select-Object -First 20

      - name: Copy source code for packaging
        run: |
          Write-Host "Copying gns3_mcp\ source code into mcp-server\ for .mcpb packaging..."
          if (Test-Path mcp-server\gns3_mcp) {
            Remove-Item -Path mcp-server\gns3_mcp -Recurse -Force
          }
          Copy-Item -Path gns3_mcp -Destination mcp-server\gns3_mcp -Recurse -Force
          Write-Host "Source code copied successfully"

      - name: Build MCP binary
        run: |
          cd mcp-server
          npx @anthropic-ai/mcpb@1.1.2 pack

      - name: Verify build output
        run: |
          if (!(Test-Path mcp-server\mcp-server.mcpb)) {
            Write-Host "Error: mcp-server.mcpb was not created"
            exit 1
          }
          Write-Host "Build successful:"
          Get-Item mcp-server\mcp-server.mcpb | Format-List

          # Verify dependencies are included (size should be ~32-35 MB with all production deps)
          $SizeMB = [math]::Round((Get-Item mcp-server\mcp-server.mcpb).Length / 1MB)
          if ($SizeMB -lt 30) {
            Write-Host "ERROR: .mcpb size is ${SizeMB}M - dependencies likely missing!"
            Write-Host "Expected size: ~32-35 MB (with FastAPI + all dependencies)"
            Write-Host "Actual size: $SizeMB MB"
            exit 1
          }
          Write-Host "Size check passed: $SizeMB MB (all dependencies included)"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mcp-server-windows
          path: mcp-server\mcp-server.mcpb
          retention-days: 30

      - name: Extract version and check for tag
        id: version
        run: |
          $manifest = Get-Content mcp-server\manifest.json | ConvertFrom-Json
          $version = $manifest.version
          echo "version=$version" >> $env:GITHUB_OUTPUT
          Write-Host "Version: $version"

          # Check if current commit has a version tag
          $tag = git describe --exact-match --tags HEAD 2>$null
          if ($tag -match "^v") {
            echo "is_tagged=true" >> $env:GITHUB_OUTPUT
            Write-Host "This commit is tagged for release"
          } else {
            echo "is_tagged=false" >> $env:GITHUB_OUTPUT
            Write-Host "This commit is not tagged"
          }

      - name: Build PyPI distributions
        if: steps.version.outputs.is_tagged == 'true'
        run: |
          python -m build
          Get-ChildItem dist\

      - name: Publish to PyPI
        if: steps.version.outputs.is_tagged == 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist\*

      - name: Create Release
        if: steps.version.outputs.is_tagged == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            mcp-server/mcp-server.mcpb
            dist/*.whl
            dist/*.tar.gz
          tag_name: v${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }} (Windows)
          body: |
            ## GNS3 MCP Server v${{ steps.version.outputs.version }} (Windows Build)

            ### Installation

            **Via pip (Recommended):**
            ```bash
            pip install gns3-mcp
            ```

            **Via Claude Desktop:**
            Download `mcp-server.mcpb` and install via Claude Desktop settings.

            ### Changes
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/master/CHANGELOG.md) for details.

            ### Platform
            - Windows-compatible binaries (Python 3.10+)
            - Built on: windows-latest runner
          draft: false
          prerelease: false
