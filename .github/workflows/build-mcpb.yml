name: Build and Publish MCP Server

on:
  workflow_dispatch:  # Manual trigger
  push:
    tags:
      - 'v*'  # Trigger ONLY on version tags (v0.42.0, v1.0.0, etc.)

permissions:
  contents: write  # Required for creating releases

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history including tags

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache system dependencies for cairosvg
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libcairo2-dev libpango1.0-dev
          version: 1.0

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache lib folder
        id: cache-lib
        uses: actions/cache@v4
        with:
          path: mcp-server/lib
          # Cache key includes version to allow manual invalidation when build process changes
          key: ${{ runner.os }}-py3.10-lib-v2-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-py3.10-lib-v2-
            ${{ runner.os }}-lib-

      - name: Create lib directory
        if: steps.cache-lib.outputs.cache-hit != 'true'
        run: |
          mkdir -p mcp-server/lib

      - name: Install Python dependencies to lib
        if: steps.cache-lib.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          # Extract only production dependencies from requirements.txt (skip dev dependencies)
          grep -E "^[a-z]" requirements.txt | head -9 > /tmp/prod-requirements.txt
          pip install --target=mcp-server/lib -r /tmp/prod-requirements.txt --no-warn-script-location

      - name: Install build tools for PyPI
        run: |
          pip install build twine

      - name: Verify dependencies installed
        run: |
          echo "Cache status: ${{ steps.cache-lib.outputs.cache-hit == 'true' && 'HIT - Using cached dependencies' || 'MISS - Installed fresh dependencies' }}"
          ls -la mcp-server/lib
          echo "Installed packages:"
          ls mcp-server/lib | head -20

      - name: Copy source code for packaging
        run: |
          echo "Copying gns3_mcp/ source code into mcp-server/ for .mcpb packaging..."
          cp -r gns3_mcp mcp-server/
          echo "Source code copied successfully"

      - name: Build MCP binary
        run: |
          cd mcp-server
          npx @anthropic-ai/mcpb@1.1.2 pack

      - name: Verify build output
        run: |
          if [ ! -f mcp-server/mcp-server.mcpb ]; then
            echo "Error: mcp-server.mcpb was not created"
            exit 1
          fi
          echo "Build successful:"
          ls -lh mcp-server/mcp-server.mcpb

          # Verify dependencies are included (size should be ~32-35 MB with all production deps)
          # Note: Package includes __pycache__ directories (~4 MB) - acceptable tradeoff for build reliability
          SIZE_MB=$(du -m mcp-server/mcp-server.mcpb | cut -f1)
          if [ "$SIZE_MB" -lt 30 ]; then
            echo "ERROR: .mcpb size is ${SIZE_MB}M - dependencies likely missing!"
            echo "Expected size: ~32-35 MB (with FastAPI + all dependencies)"
            echo "Actual size: ${SIZE_MB} MB"
            exit 1
          fi
          echo "Size check passed: ${SIZE_MB} MB (all dependencies included)"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mcp-server-binary
          path: mcp-server/mcp-server.mcpb
          retention-days: 30

      - name: Extract version and check for tag
        id: version
        run: |
          VERSION=$(python -c "import json; print(json.load(open('mcp-server/manifest.json'))['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
          # Check if current commit has a version tag
          if git describe --exact-match --tags HEAD 2>/dev/null | grep -q "^v"; then
            echo "is_tagged=true" >> $GITHUB_OUTPUT
            echo "This commit is tagged for release"
          else
            echo "is_tagged=false" >> $GITHUB_OUTPUT
            echo "This commit is not tagged"
          fi

      - name: Build PyPI distributions
        if: steps.version.outputs.is_tagged == 'true'
        run: |
          python -m build
          ls -lh dist/

      - name: Publish to PyPI
        if: steps.version.outputs.is_tagged == 'true'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*

      - name: Create Release
        if: steps.version.outputs.is_tagged == 'true'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            mcp-server/mcp-server.mcpb
            dist/*.whl
            dist/*.tar.gz
          tag_name: v${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## GNS3 MCP Server v${{ steps.version.outputs.version }}

            ### Installation

            **Via pip (Recommended):**
            ```bash
            pip install gns3-mcp
            ```

            **Via Claude Desktop:**
            Download `mcp-server.mcpb` and install via Claude Desktop settings.

            ### Changes
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/master/CHANGELOG.md) for details.
          draft: false
          prerelease: false
